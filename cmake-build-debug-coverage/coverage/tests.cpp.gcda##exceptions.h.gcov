        -:    0:Source:C:/Desktop/OOP/lab6/exceptions.h
        -:    0:Graph:C:\Desktop\OOP\lab6\cmake-build-debug-coverage\CMakeFiles\lab6.dir\tests.cpp.gcno
        -:    0:Data:C:\Desktop\OOP\lab6\cmake-build-debug-coverage\CMakeFiles\lab6.dir\tests.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Daniel on 25.03.2022.
        -:    3://
        -:    4:
        -:    5:#ifndef LAB6_EXCEPTIONS_H
        -:    6:#define LAB6_EXCEPTIONS_H
        -:    7:
        -:    8:#include <exception>
        -:    9:#include <string>
        -:   10:#include <vector>
        -:   11:using std::exception;
        -:   12:using std::string;
        -:   13:using std::ostream;
        -:   14:using std::vector;
        -:   15:
        -:   16:class MyException : public std::exception
        -:   17:{
        -:   18:protected:
        -:   19:    string msg;
        -:   20:public:
       62:   21:    MyException() { msg = "MyException!\n"; } ;
       27:   22:    explicit MyException (const string& msg) : msg(msg) {}
------------------
_ZN11MyExceptionC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
        1:   22:    explicit MyException (const string& msg) : msg(msg) {}
------------------
_ZN11MyExceptionC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
       26:   22:    explicit MyException (const string& msg) : msg(msg) {}
------------------
       53:   23:    const char * what() const noexcept override { return msg.c_str(); }
        1:   24:    friend ostream& operator<<(ostream& out, const MyException& ex) {out<<ex.msg; return out;}
        -:   25:};
        -:   26:
        -:   27:class RepoException : public MyException { using MyException::MyException;};
        -:   28:class ServiceException : public MyException { using MyException::MyException;};
        -:   29:class InvalidFieldException : public MyException { using MyException::MyException;};
        -:   30:
        -:   31:class ValidatorException : public MyException {
        -:   32:private:
        -:   33:    string sep="\n";
        -:   34:    vector<InvalidFieldException> errors;
        -:   35:public:
        -:   36:    //using MyException::MyException;
       49:   37:    explicit ValidatorException()=default;
       13:   38:    explicit ValidatorException(const vector<InvalidFieldException> &errors_) : errors{errors_} {
       13:   39:        msg = "";
       26:   40:        for(const InvalidFieldException& ie : errors_)
       13:   41:            msg += ie.what() + sep;
       13:   42:    }
        5:   43:    ValidatorException(const ValidatorException& ve)=default;
        9:   44:    ValidatorException& operator=(const ValidatorException& ve) = default;
       13:   45:    friend ValidatorException operator+(const ValidatorException& ve1, const ValidatorException& ve2)
        -:   46:    {
       13:   47:        ValidatorException ve;
       13:   48:        ve.sep = ve1.sep;
       13:   49:        ve.errors.insert(ve.errors.end(), ve1.errors.cbegin(), ve1.errors.cend());
       13:   50:        ve.errors.insert(ve.errors.end(), ve2.errors.cbegin(), ve2.errors.cend());
       13:   51:        ve.msg = "";
       45:   52:        for(const InvalidFieldException& ie : ve.errors)
       32:   53:            ve.msg += ie.what() + ve.sep;
       13:   54:        return ve;
    =====:   55:    }
       11:   56:    friend ValidatorException operator+(const ValidatorException& ve, const InvalidFieldException& ie)
        -:   57:    {
       33:   58:        vector<InvalidFieldException> vct{ie};
       11:   59:        ValidatorException ve2(vct);
       22:   60:        return ve + ve2;
       11:   61:    }
        2:   62:    friend ValidatorException operator+(const ValidatorException& ve, const string& msg)
        -:   63:    {
        4:   64:        return ve + InvalidFieldException(msg);
        -:   65:    }
        1:   66:    friend ValidatorException& operator+=(ValidatorException& ve1, const ValidatorException& ve2){
        1:   67:        ve1 = ve1 + ve2;
        1:   68:        return ve1;
        -:   69:    }
        7:   70:    friend ValidatorException& operator+=(ValidatorException& ve, const InvalidFieldException& ie)
        -:   71:    {
        7:   72:        ve = ve + ie;
        7:   73:        return ve;
        -:   74:    }
        1:   75:    friend ValidatorException& operator+=(ValidatorException& ve, const string& msg)
        -:   76:    {
        1:   77:        ve = ve + InvalidFieldException(msg);
        1:   78:        return ve;
        -:   79:    }
       35:   80:    explicit operator int() const {return (int)errors.size(); }
        -:   81:};
        -:   82:
        -:   83:#endif //LAB6_EXCEPTIONS_H
