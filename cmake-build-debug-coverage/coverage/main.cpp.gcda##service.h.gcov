        -:    0:Source:C:/Desktop/OOP/lab6/service.h
        -:    0:Graph:C:\Desktop\OOP\lab6\cmake-build-debug-coverage\CMakeFiles\lab6.dir\main.cpp.gcno
        -:    0:Data:C:\Desktop\OOP\lab6\cmake-build-debug-coverage\CMakeFiles\lab6.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Daniel on 26.03.2022.
        -:    3://
        -:    4:
        -:    5:#ifndef LAB6_SERVICE_H
        -:    6:#define LAB6_SERVICE_H
        -:    7:
        -:    8:#include "domain.h"
        -:    9:#include "repository.h"
        -:   10:#include "repository.cpp"
        -:   11:#include "validator.h"
        -:   12:
        -:   13:class Service{
        -:   14:private:
        -:   15:    Repository<Locatar> repository;
        -:   16:public:
        -:   17:    // doar constructor fara parametrii
        8:   18:    Service()=default;
        -:   19:    Service(const Service&) = delete;
        -:   20:    //template<class T>
        -:   21:    //Service(const Repository<T>&) = delete;
        -:   22:
        -:   23:    // adauga elementul in repository
        -:   24:    // arunca ServiceException daca nu a putut fi creat
        -:   25:    // arunca RepoException daca exista in container
        -:   26:    // arunca ValidatorException daca nu este valid
        -:   27:    void add(const TypeApartament&, const TypeNume&, const TypeSuprafata&, const TypeTip&);
        -:   28:
        -:   29:    // sterge elementul din repository
        -:   30:    // arunca RepoException daca elementul nu exista
        -:   31:    // arunca ValidatorException daca nu este valid
        -:   32:    void remove(const TypeApartament&, const TypeNume&, const TypeSuprafata&, const TypeTip&);
        -:   33:
        -:   34:    // modific primul elemet cu al doilea
        -:   35:    // arunca RepoException daca elementul nu exista
        -:   36:    // arunca ValidatorException daca unul din locatari nu este valid
        -:   37:    void modify(const TypeApartament&, const TypeNume&, const TypeSuprafata&, const TypeTip&, const TypeApartament&, const TypeNume&, const TypeSuprafata&, const TypeTip&);
        -:   38:
        -:   39:    // cauta apartamentul cu numarul dat
        -:   40:    // arunca ServiceException daca nu exista un astfel de apartament
        -:   41:    // arunca InvalidFieldException daca nu este valid
        -:   42:    const Locatar& findApartament(const TypeApartament&);
        -:   43:
        -:   44:    // returnez toate elementele care au tipul dat
        -:   45:    // arunca InvalidFieldException daca nu este valid
        -:   46:    Repository<Locatar> filterTip(const TypeTip&);
        -:   47:
        -:   48:    // returnez toate elementele care au suprafata data?
        -:   49:    // arunca InvalidFieldException daca nu este valid
        -:   50:    Repository<Locatar> filterSuprafata(const TypeSuprafata&);
        -:   51:
        -:   52:    // sortez repository-ul dupa nume crescator
        -:   53:    void sortNume();
        -:   54:
        -:   55:    // sortez repository-ul dupa suprafata crescator
        -:   56:    void sortSuprafata();
        -:   57:
        -:   58:    // sortez repository-ul dupa tip, iar la tipuri egale sortez dupa suprafata
        -:   59:    void sortTipSuprafata();
        -:   60:
        -:   61:    // implementare iteratori de begin si end pentru a putea intera
        -:   62:    Locatar* begin();
        -:   63:    const Locatar* cbegin() const;
        -:   64:    Locatar* end();
        -:   65:    const Locatar* cend() const;
        -:   66:};
        -:   67:
        -:   68:#endif //LAB6_SERVICE_H
