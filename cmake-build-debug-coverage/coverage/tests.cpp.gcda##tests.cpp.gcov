        -:    0:Source:C:/Desktop/OOP/lab6/tests.cpp
        -:    0:Graph:C:\Desktop\OOP\lab6\cmake-build-debug-coverage\CMakeFiles\lab6.dir\tests.cpp.gcno
        -:    0:Data:C:\Desktop\OOP\lab6\cmake-build-debug-coverage\CMakeFiles\lab6.dir\tests.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Daniel on 25.03.2022.
        -:    3://
        -:    4:
        -:    5:#include "tests.h"
        -:    6:
        -:    7:class TestDomain : public ITest
        -:    8:{
        -:    9:protected:
        1:   10:    void ctors() override{
        1:   11:        Locatar l1;
        1:   12:        Locatar l2(10, "Ion", 200, "apartament");
        1:   13:        Locatar l3(l2);
        1:   14:    }
        -:   15:
        1:   16:    void getters() override{
        1:   17:        Locatar l2(10, "Ion", 200, "apartament");
       1*:   18:        assert(l2.getTip() == "apartament");
       1*:   19:        assert(l2.getApartament() == 10);
       1*:   20:        assert(l2.getNumeProprietar() == "Ion");
       1*:   21:        assert(l2.getSuprafata() == 200);
        1:   22:    }
        -:   23:
        1:   24:    void setters() override{
        1:   25:        Locatar l1;
       1*:   26:        assert(l1 == Locatar());
        1:   27:        l1.setTip("apartament");
        1:   28:        l1.setApartament(10);
        1:   29:        l1.setNumeProprietar("Ion");
        1:   30:        l1.setSuprafata(200);
       1*:   31:        assert(l1 == Locatar(10, "Ion", 200, "apartament"));
        1:   32:    }
        -:   33:
        1:   34:    void operators() override{
        1:   35:        Locatar l1;
       1*:   36:        assert(l1 == Locatar());
        1:   37:        Locatar l2(10, "Ion", 200, "apartament");
        1:   38:        Locatar l3(l2);
       1*:   39:        assert( l3 != l1);
        1:   40:        l1.setApartament(5);
       1*:   41:        assert(l1 < l2);
       1*:   42:        assert(l1 <= l2);
       1*:   43:        assert(l2 > l1);
       1*:   44:        assert(l2 >= l1);
        1:   45:        std::strstream sout;
        1:   46:        sout<<l2;
        1:   47:        sout>>l2;
       1*:   48:        assert(l3 == l2);
        1:   49:    }
        -:   50:};
        -:   51:
        -:   52:class TestRepository : public ITest{
        -:   53:protected:
        1:   54:    void ctors() override {
        1:   55:        Repository<int> repository;
       1*:   56:        assert(repository.size()==0);
        1:   57:        repository.elements[0] = 2;
        1:   58:        repository.dim = 1;
        1:   59:        Repository<int> r2(repository);
       1*:   60:        assert(r2.capacity == repository.capacity);
       1*:   61:        assert(r2.size() == 1);
        1:   62:    }
        1:   63:    void add() override{
        1:   64:        Repository<int> repository;
        1:   65:        repository.add(1);
       1*:   66:        assert(repository.size() == 1);
        1:   67:        repository.add(2);
       1*:   68:        assert(repository.size() == 2);
       1*:   69:        try{ repository.add(1); assert(false); }
        1:   70:        catch(RepoException& re) {}
        1:   71:    }
        1:   72:    void find() override{
        1:   73:        Repository<int> repository;
        1:   74:        repository.add(1);
        1:   75:        repository.add(2);
        1:   76:        auto it = repository.find(2);
       1*:   77:        assert(*it == 2);
       1*:   78:        assert( repository.find(2, it+1) == NULL);
        1:   79:        it = repository.find(3);
       1*:   80:        assert(it == nullptr);
        3:   81:        it = repository.find([](const int& a){return !(a&1);});
       1*:   82:        assert(*it == 2);
       2*:   83:        assert(repository.find([](const int& a){return !(a&1);}, nullptr, it) == nullptr);
        3:   84:        it = repository.find([](const int& a){return a>10;});
       1*:   85:        assert(it == nullptr);
        1:   86:    }
        1:   87:    void remove() override{
        1:   88:        Repository<int> repository;
        1:   89:        repository.add(1);
        1:   90:        repository.add(2);
        1:   91:        repository.remove(2);
       1*:   92:        assert(repository.size() == 1);
       1*:   93:        assert(repository[0] == 1);
       1*:   94:        try {repository.remove(2); assert(false); }
        1:   95:        catch(RepoException& re) {}
        2:   96:        int elem = repository.remove([](const int& x){return x < 2;});
       1*:   97:        assert(elem == 1);
       1*:   98:        assert(repository.size() == 0);
        1:   99:    }
        1:  100:    void methods() override{
        1:  101:        Repository<int> repository;
        1:  102:        repository.add(2);
        1:  103:        repository.add(1);
        1:  104:        repository.sort();
       1*:  105:        assert(repository[0]==1);
       1*:  106:        assert(repository[1]==2);
        2:  107:        repository.sort([](const int& a, const int& b){return a > b;});
       1*:  108:        assert(repository[0]==2);
       1*:  109:        assert(repository[1]==1);
        1:  110:    }
        1:  111:    void getters() override{
        1:  112:        Repository<int> repository;
        1:  113:        int a=1, b=2;
        1:  114:        repository.add(a);
        1:  115:        repository.add(b);
        3:  116:        for(int x : repository){}
        3:  117:        for(int& x : repository){}
        3:  118:        for(const int x: repository){}
        3:  119:        for(const int& x: repository){}
        3:  120:        for(auto x : repository){}
        3:  121:        for(auto& x : repository){}
        3:  122:        for(const auto x: repository){}
        3:  123:        for(const auto& x: repository){}
        1:  124:    }
        -:  125:};
        -:  126:
        -:  127:class TestService : public ITest{
        -:  128:private:
        5:  129:    static int lg(const Service& s) { return (int)(s.cend() - s.cbegin()); }
        4:  130:    static void init(Service& s, Locatar& l1, Locatar& l2, Locatar& l3)
        -:  131:    {
        4:  132:        l1 = Locatar {32, "Andi", 200, "apartament"};
        4:  133:        l2 = Locatar {13, "Ioana", 130, "apartament"};
        4:  134:        l3 = Locatar {13, "Ioana", 7, "apartament"};
        4:  135:        s.add(32, "Andi", 200, "apartament");
        4:  136:        s.add(13, "Ioana", 130, "apartament");
        4:  137:        s.add(13, "Ioana", 7, "apartament");
        4:  138:    }
        3:  139:    static bool equals(const Service& s, const Locatar& l1, const Locatar& l2, const Locatar& l3)
        -:  140:    {
        3:  141:        return  *(s.cbegin()) == l1 &&
       6*:  142:                *(s.cbegin()+1) == l2 &&
        6:  143:                *(s.cbegin()+2) == l3;
        -:  144:    }
        -:  145:protected:
        1:  146:    void add() override{
        1:  147:        Service s;
       1*:  148:        assert(lg(s) == 0);
        1:  149:        s.add(32, "Andi", 200, "apartament");
       1*:  150:        assert(lg(s) == 1);
        1:  151:        s.add(13, "Ioana", 130, "apartament");
       1*:  152:        assert(lg(s) == 2);
       5*:  153:        try{ s.add(32, "Andi", 200, "apartament"); assert(false);}
        1:  154:        catch(RepoException& re) {}
        1:  155:    }
        1:  156:    void remove() override{
        1:  157:        Service s;
        1:  158:        s.add(32, "Andi", 200, "apartament");
        1:  159:        s.add(13, "Ioana", 130, "apartament");
        1:  160:        s.remove(32, "Andi", 200, "apartament");
       1*:  161:        assert(lg(s) == 1);
       5*:  162:        try{s.remove(32, "Andi", 200, "apartament"); assert(false); }
        1:  163:        catch(RepoException& re){}
       5*:  164:        try{s.remove(12, "Ioana", 130, "apartament"); assert(false); }
        1:  165:        catch(RepoException& re){}
        1:  166:        s.remove(13, "Ioana", 130, "apartament");
       1*:  167:        assert(lg(s) == 0);
       5*:  168:        try{s.remove(32, "Andi", 200, "apartament"); assert(false); }
        1:  169:        catch(RepoException& re){}
        1:  170:    }
        1:  171:    void methods() override{
        1:  172:        Service s;
        1:  173:        s.add(32, "Andi", 200, "apartament");
        1:  174:        s.add(13, "Ioana", 130, "apartament");
        1:  175:        s.modify(13, "Ioana", 130, "apartament", 13, "Ioana Pir", 130, "apartament");
       1*:  176:        assert(*(s.begin()+1) == Locatar(13, "Ioana Pir", 130, "apartament"));
       9*:  177:        try{s.modify(1, "Ioana", 130, "apartament", 13, "Ioana Pir", 130, "apartament"); assert(false);}
        1:  178:        catch(RepoException&){}
       9*:  179:        try{s.modify(-1, "Ioana", 130, "apartament", 13, "Ioana Pir", 130, "apartament"); assert(false);}
        1:  180:        catch(ValidatorException&){}
       9*:  181:        try{s.modify(1, "Ioana", 130, "apartament", 13, "Ioana Pir", -130, "apartament"); assert(false);}
        1:  182:        catch(ValidatorException&){}
        1:  183:    }
        1:  184:    void find() override{
        1:  185:        Service s;
        1:  186:        Locatar l1, l2, l3;
        1:  187:        init(s, l1, l2, l3);
        1:  188:        Locatar l = s.findApartament(32);
       1*:  189:        assert(l == Locatar(32, "Andi", 200, "apartament"));
       1*:  190:        try{ s.findApartament(23); assert(false);}
        1:  191:        catch (ServiceException& se) {}
        1:  192:        l = s.findApartament(13);
       1*:  193:        assert(l == Locatar(13, "Ioana", 130, "apartament"));
        1:  194:        s.remove(13, "Ioana", 130, "apartament");
        1:  195:        l = s.findApartament(13);
       1*:  196:        assert(l == Locatar(13, "Ioana", 7, "apartament"));
        1:  197:    }
        1:  198:    void filter() override{
        1:  199:        Service s;
        1:  200:        Locatar l1, l2, l3;
        1:  201:        init(s, l1, l2, l3);
        2:  202:        Repository<Locatar> filtrutip{s.filterTip("apartament")};
       1*:  203:        assert(filtrutip.size() == 3);
        1:  204:        Repository<Locatar> filtrusupr{s.filterSuprafata(130)};
       1*:  205:        assert(filtrusupr[0] == l2);
        2:  206:        Repository<Locatar> filtrutip2{s.filterTip("garsoniera1")};
       1*:  207:        assert(filtrutip2.size() == 0);
        1:  208:    }
        1:  209:    void sort() override{
        1:  210:        Service s;
        1:  211:        Locatar l1, l2, l3;
        1:  212:        init(s, l1, l2, l3);
        1:  213:        s.sortNume();
       1*:  214:        assert(equals(s, l1, l2, l3));
        1:  215:        s.sortSuprafata();
       1*:  216:        assert(equals(s, l3, l2, l1));
        1:  217:        s.sortTipSuprafata();
       1*:  218:        assert(equals(s, l3, l2, l1));
        1:  219:    }
        1:  220:    void getters() override{
        1:  221:        Service s;
        1:  222:        Locatar l1, l2, l3;
        1:  223:        init(s, l1, l2, l3);
        4:  224:        for(Locatar x : s){}
        4:  225:        for(Locatar& x : s){}
        4:  226:        for(const Locatar x: s){}
        4:  227:        for(const Locatar& x: s){}
        4:  228:        for(auto x : s){}
        4:  229:        for(auto& x : s){}
        4:  230:        for(const auto x: s){}
        4:  231:        for(const auto& x: s){}
        1:  232:    }
        -:  233:};
        -:  234:
        -:  235:class TestExceptions : public ITest{
        -:  236:protected:
        1:  237:    void ctors() override{
        1:  238:        try {throw MyException("12");}
        1:  239:        catch(MyException& ex){ assert(strcmp(ex.what(), "12")==0);}
        1:  240:        try {throw RepoException("12");}
        1:  241:        catch(RepoException& ex){ assert(strcmp(ex.what(), "12")==0);}
        1:  242:        try {throw ServiceException("12");}
        1:  243:        catch(ServiceException& ex){ assert(strcmp(ex.what(), "12")==0);}
        1:  244:        try {throw InvalidFieldException("12");}
        1:  245:        catch(InvalidFieldException& ex){ assert(strcmp(ex.what(), "12")==0);}
        -:  246:
        1:  247:        ValidatorException ve;
        2:  248:        InvalidFieldException ie("ex");
        3:  249:        vector<InvalidFieldException> vct{ie};
        1:  250:        ValidatorException ve2(vct);
        1:  251:        ValidatorException ve3(ve2);
        1:  252:        MyException me(ve); // testez pofimorfism
        1:  253:        assert(strcmp(me.what(), ve.what()) == 0);
        1:  254:        assert(strcmp(ve3.what(), ve2.what()) == 0);
        1:  255:    }
        1:  256:    void operators() override{
        1:  257:        ValidatorException ve, data;
        2:  258:        InvalidFieldException ie("ex");
        3:  259:        vector<InvalidFieldException> vct{ie};
        1:  260:        ValidatorException ve2(vct); // 1
        1:  261:        ValidatorException ve3(ve2); // 1
       1*:  262:        assert((int)data == 0);
        1:  263:        data = ve2 + ve3;
       1*:  264:        assert((int)data == 2);
        1:  265:        data = ve2 + ie;
       1*:  266:        assert((int)data == 2);
        1:  267:        data = ve2 + "Eroare la afisare!";
       1*:  268:        assert((int)data == 2);
        1:  269:        ve2 += ve3;
        1:  270:        ve2 += ie;
        1:  271:        ve2 += "Eroare la afisare!";
        1:  272:        std::ostrstream out;
        1:  273:        out<<ve2 + "rip";
        1:  274:    }
        -:  275:};
        -:  276:
        -:  277:class TestValidator : public ITest{
        -:  278:protected:
        1:  279:    void methods() override{
        1:  280:        Locatar l(12, "Andrei Mirun", 25, "apartament");
        1:  281:        ValidatorLocatar::validLocatar(l);
       1*:  282:        try {ValidatorLocatar::validApartament(-12);assert(false);}
        1:  283:        catch(InvalidFieldException&){}
       1*:  284:        try {ValidatorLocatar::validSuprafata(-23);assert(false);}
        1:  285:        catch(InvalidFieldException&){}
       3*:  286:        try {ValidatorLocatar::validNume("Dac @"); assert(false);}
        1:  287:        catch(InvalidFieldException&){}
       3*:  288:        try {ValidatorLocatar::validTip("tip2#");assert(false);}
        1:  289:        catch(InvalidFieldException&){}
        1:  290:        Locatar l2(-12, "324324v3 #$#@$", -5, "2783682737sf%R%^");
       1*:  291:        try{ValidatorLocatar::validLocatar(l2);assert(false);}
        1:  292:        catch(ValidatorException& ve) { assert((int)ve == 4); }
        1:  293:    }
        -:  294:};
        -:  295:
        1:  296:void test()
        -:  297:{
        1:  298:    TestDomain().run();
        1:  299:    TestRepository().run();
        1:  300:    TestService().run();
        1:  301:    TestExceptions().run();
        1:  302:    TestValidator().run();
        1:  303:    std::cout<<"Tests done!\n";
        1:  304:}
